{"version":3,"sources":["api.js","reducer.js","Search/Search.jsx","Loader/Loader.jsx","Card/Card.jsx","Card/CardContainer.jsx","MoreInfo/InfoItem.jsx","MoreInfo/MoreInfo.jsx","App.js","reportWebVitals.js","store.js","index.js"],"names":["instance","require","default","create","request","withCredentials","baseURL","params","units","appid","weatherAPI","name","get","lat","lon","DELETE_CARD","SET_CARD_DATA","GET_STORAGE_DATA","TOGGLE_IS_LOADING","UPDATE_CURRENT_WEATHER","TOGGLE_INFO_MODE","initialState","cities","cardData","storageData","JSON","parse","localStorage","getItem","isLoading","isInfoMode","addCard","id","main","weather","sys","hourlyData","type","currentTemp","Math","round","temp","icon","country","setCurrentWeather","toggleIsLoading","toggleInfoMode","reducer","state","action","filter","item","setItem","stringify","find","map","n","connect","getCardInfo","city","dispatch","a","Response","data","coord","requestHourly","hourly","splice","props","useState","value","setValue","className","placeholder","onChange","e","target","disabled","onClick","Loader","Card","updateCurrentWeather","deleteCard","alt","src","showMoreInfo","c","index","InfoItem","dateObj","Date","time","hours","getHours","minutes","getMinutes","formattedTime","toString","padStart","MoreInfo","t","dt","App","useSelector","setHourlyData","setName","useDispatch","useEffect","window","addEventListener","catchAllUnhandledErrors","removeEventListener","PromiseRejectionEvent","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f88e314.chunk.js","sourcesContent":["const { default: Axios } = require(\"axios\");\r\n\r\nconst instance = Axios.create({\r\n    request: {\r\n        withCredentials: true,\r\n    },\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/',   \r\n    params: {\r\n        units: 'metric',\r\n        appid: '000e2cf68861a3f1026427e9bf8a1b2d'\r\n    }\r\n});\r\n\r\nexport const weatherAPI = {\r\n    getWeatherData(name) {\r\n        return instance.get(`weather?q=${name}`)\r\n    },    \r\n    getHourlyWeather({ lat, lon }) {\r\n        return instance.get(`onecall?lat=${lat}&lon=${lon}&exclude=current,minutely,daily`)\r\n    }\r\n}","import { weatherAPI } from \"./api\";\r\n\r\nconst DELETE_CARD = 'DELETE_CARD';\r\nconst SET_CARD_DATA = 'SET_CARD_DATA';\r\nconst GET_STORAGE_DATA = 'GET_STORAGE_DATA';\r\nconst TOGGLE_IS_LOADING = 'TOGGLE_IS_LOADING';\r\nconst UPDATE_CURRENT_WEATHER = 'UPDATE_CURRENT_WEATHER';\r\nconst TOGGLE_INFO_MODE = 'TOGGLE_INFO_MODE';\r\n\r\nconst initialState = {\r\n  cities: [],\r\n  cardData: [],\r\n  storageData: JSON.parse(localStorage.getItem('cities')) || [],  \r\n  isLoading: false,\r\n  isInfoMode: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_STORAGE_DATA:       \r\n      return {\r\n        ...state,        \r\n        cities: state.storageData              \r\n      }\r\n    \r\n    case DELETE_CARD:        \r\n      return {\r\n        ...state,\r\n        isInfoMode: false,\r\n        cities: state.cities.filter(item => item.id !== action.id),\r\n        storageData: localStorage.setItem('cities', JSON.stringify(state.cities.filter(item => item.id !== action.id))),\r\n      }       \r\n    case SET_CARD_DATA:   \r\n      return {\r\n        ...state,\r\n        cardData: action.cardData,       \r\n        cities: state.cities.find(item => item.name === action.cardData.name) ? [...state.cities] :\r\n          [...state.cities, {\r\n          name: action.cardData.name, id: action.cardData.id,\r\n          currentTemp: action.cardData.currentTemp,\r\n          icon: action.cardData.icon,\r\n          country: action.cardData.country,\r\n          hourlyData: action.cardData.hourlyData\r\n        }],   \r\n        storageData: localStorage.setItem('cities', JSON.stringify(state.cities.find(item => item.name === action.cardData.name) ? [...state.cities] : [...state.cities, action.cardData ])),\r\n       }\r\n    case UPDATE_CURRENT_WEATHER:      \r\n      return {\r\n        ...state,\r\n        cities: state.cities.map(n => n.name === action.name ? {...n, currentTemp : action.temp, icon:action.icon} : n),\r\n        storageData: localStorage.setItem('cities', JSON.stringify(state.cities.map(n => n.name === action.name? {...n, currentTemp: action.temp, icon:action.icon} : n)))\r\n      }\r\n    case TOGGLE_IS_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: action.isLoading\r\n      }\r\n    case TOGGLE_INFO_MODE: \r\n      return {\r\n        ...state,\r\n        isInfoMode: action.isInfoMode\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getStorageData = () => ({type: GET_STORAGE_DATA})\r\n\r\nexport const deleteCard = (id) => ({ type: DELETE_CARD, id });\r\n\r\nexport const addCard = (name, id, main, weather, sys, hourlyData) =>\r\n  ({\r\n    type: SET_CARD_DATA,\r\n    cardData: {\r\n      name, id,\r\n      currentTemp: Math.round(main.temp),\r\n      icon: weather[0].icon,\r\n      country: sys.country,\r\n      hourlyData\r\n    }\r\n  })\r\n\r\nexport const getCardInfo = (city) => async (dispatch) => {  \r\n  const Response = await weatherAPI.getWeatherData(city);  \r\n  dispatch(toggleIsLoading(true));\r\n  const { name, id, main, weather, coord, sys } = Response.data;\r\n  const requestHourly = await weatherAPI.getHourlyWeather(coord);\r\n  const { hourly } = requestHourly.data\r\n  const hourlyData = hourly.splice(24, 24);\r\n  dispatch(addCard(name, id, main, weather, sys, hourlyData));    \r\n  dispatch(toggleIsLoading(false))\r\n}\r\n\r\nexport const updateCurrentWeather = (city) => async dispatch => {\r\n  dispatch(toggleIsLoading(true));\r\n  const Response = await weatherAPI.getWeatherData(city);\r\n  const { name, main, weather } = Response.data;\r\n  dispatch(setCurrentWeather(name, main, weather));\r\n  dispatch(toggleIsLoading(false));\r\n}\r\n\r\nexport const setCurrentWeather = (name, main, weather) =>\r\n  ({\r\n    type: UPDATE_CURRENT_WEATHER, name,\r\n    temp: Math.round(main.temp),\r\n    icon: weather[0].icon\r\n  })\r\n\r\nexport const toggleIsLoading = (isLoading) => ({ type: TOGGLE_IS_LOADING, isLoading })\r\n\r\nexport const toggleInfoMode = (isInfoMode) => ({ type: TOGGLE_INFO_MODE, isInfoMode })\r\n\r\nexport default reducer;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCardInfo } from '../reducer';\r\n\r\nconst Search = (props) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n        <div className=\"input-group my-5\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Enter city name...\" value={value}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n            }} />\r\n            <div className=\"input-group-append\">\r\n                <button className=\"btn btn-warning\" type=\"button\" disabled={!value}\r\n                    onClick={() => {                       \r\n                        if (value)\r\n                        props.getCardInfo(value);\r\n                        setValue('');\r\n                    }}>Search</button>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cities: state.cities\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getCardInfo})(Search);","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = (props) => {\r\n    return <div className=\"lds-dual-ring\"></div>\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport Loader from '../Loader/Loader';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {     \r\n    \r\n    return (\r\n        <div className='d-inline-block vertical-align-top mx-2 cardItem'>\r\n            <div className=\"card mb-2\">\r\n                <div className='card-header d-flex justify-content-between align-items-center'>\r\n                    <div>{props.name}\r\n                        <span className='text-muted'> / {props.country}</span>\r\n                    </div>\r\n                    <div>\r\n                        <button className='btn p-1' onClick={() => props.updateCurrentWeather(props.name)}>\r\n                            <i className=\"fas fa-sync-alt\"></i></button>\r\n                        <button className='btn p-1' onClick={() => props.deleteCard(props.id)}>\r\n                            <i className=\"fas fa-trash-alt\"></i></button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-body d-flex flex-column align-items-center\">\r\n                    {props.icon ? <img alt='weatherIcon' src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} /> : <Loader />}\r\n                    <h5 className=\"card-title\">{props.currentTemp} °C</h5>                \r\n                    <div className='btn-group'>\r\n                        <button className='btn btn-warning btn-sm'\r\n                            onClick={() => props.showMoreInfo(props.hourlyData, props.name)}>View more...</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Loader from '../Loader/Loader';\r\nimport { deleteCard, updateCurrentWeather} from '../reducer';\r\nimport Card from './Card';\r\n\r\nconst CardContainer = ({isLoading, cities, cardData, deleteCard, showMoreInfo, updateCurrentWeather}) => {\r\n    \r\n    return isLoading ? <Loader /> : cities.map((c, index) =>\r\n        <Card key={index}\r\n            id={c.id}\r\n            name={c.name}\r\n            currentTemp={c.currentTemp}\r\n            icon={c.icon}\r\n            hourlyData={c.hourlyData}\r\n            country={c.country}\r\n            isLoading={isLoading}\r\n            cardData={cardData}\r\n            deleteCard={deleteCard}\r\n            showMoreInfo={showMoreInfo}\r\n            updateCurrentWeather={updateCurrentWeather}\r\n            />)      \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cities: state.cities,        \r\n        cardData: state.cardData,\r\n        isLoading: state.isLoading,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {deleteCard, updateCurrentWeather})(CardContainer);","import React from 'react';\r\nimport './InfoItem.css';\r\n\r\nconst InfoItem = (props) => {    \r\n    const dateObj = new Date(props.time * 1000)    \r\n    const hours = dateObj.getHours(); \r\n    const minutes = dateObj.getMinutes(); \r\n    const formattedTime = hours.toString().padStart(2, '0') + ':' +  \r\n                minutes.toString().padStart(2, '0')\r\n    \r\n    return <div className='d-inline-block mb-2'>\r\n                <div className='d-flex flex-column align-items-center infoItem'>\r\n                    <span className='text-black-50'>{formattedTime}</span>\r\n                    <img alt='weatherIcon' src={`http://openweathermap.org/img/wn/${props.weather}.png`} />\r\n                    <span className='badge badge-warning mb-2'>{Math.round(props.temp)}°C</span>       \r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default InfoItem;","import React from 'react';\r\nimport InfoItem from './InfoItem';\r\n\r\nconst MoreInfo = (props) => {   \r\n    return props.hourlyData.map(t => <InfoItem key={t.dt + t.temp} time={t.dt} temp={t.temp} weather={t.weather[0].icon} />)\r\n}\r\n\r\nexport default MoreInfo;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Search from './Search/Search';\nimport CardContainer from './Card/CardContainer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getStorageData, toggleInfoMode } from './reducer';\nimport MoreInfo from './MoreInfo/MoreInfo';\n\n\nconst App = () => { \n  const isInfoMode = useSelector(state => state.isInfoMode)\n  \n  const [hourlyData, setHourlyData] = useState([]);   \n  const [name, setName] = useState('');  \n\n  const dispatch = useDispatch();  \n\n  useEffect(() => {\n    window.addEventListener(\"unhandledrejection\", catchAllUnhandledErrors);\n    return () => {\n    window.removeEventListener('unhandledrejection', () => {})\n  }\n  }, [])\n  \n  useEffect(() => {\n    dispatch(getStorageData())\n  }, [])  \n\n  const catchAllUnhandledErrors = (PromiseRejectionEvent) => {\n    alert(\"Incorrect city name! Please, check the entered data.\");\n  };\n\n  const showMoreInfo = (hourlyData, name) => {    \n    dispatch(toggleInfoMode(true))\n    setName(name);\n    setHourlyData(hourlyData)\n  }  \n\n  const hideMoreInfo = () => {\n    dispatch(toggleInfoMode(false))\n  }\n  \n  return (\n    <div className=\"container\">\n      <div className='display-3 text-center mt-4'>WeatherApp on <span className='font-weight-bold'>ReactJS</span></div>      \n      <Search />      \n      <div className='cardsBlock'><CardContainer showMoreInfo={showMoreInfo} /></div>  \n      {isInfoMode && <>\n        <div className='display-4 text-center my-4'>\n          <button className='btn btn-lg' onClick={hideMoreInfo}>\n            <i className=\"fas fa-chevron-up\"></i></button>Hourly Forecast for\n            <span className='font-weight-bold'> {name}</span>:\n            </div>\n        <div className='infoBlock mb-3'>\n          <MoreInfo hourlyData={hourlyData} /></div>\n      </>}\n      </div>\n    );\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport reducer from './reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n\treducer,\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(\r\n\t\t\tthunkMiddleware\r\n\t\t)\r\n\t)\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}